// This file is autogenerated.
// Do not modify it manually!

#include <functional>
#include <type_traits>
#include <unordered_map>

#include "common/common.hpp"
#include "common/instruction.hpp"
#include "decoder/decoder.hpp"


namespace pvm {

{% for type in types +%}
Instr decode{{ type.mnemonic | upper }}(std::uint32_t bytecode) {
  {% set name = type.mnemonic %}
  Instr{{name | upper}} concreteInstr{
  {% for key, val in type.fields.items() %}
    .{{ key }} = getBits<{{ val.from }}, {{ val.to }}>(bytecode),
  {% endfor %}
  };

  Instr resultInstr{
    .opType = e{{ name | upper }},
    .instrVar = concreteInstr
  };
  return resultInstr;
}
{% endfor %}

std::array<std::function<Instr(std::uint32_t)>, eOPCODENUM> map{
  {% for type in types %}
  &decode{{ type.mnemonic | upper }},
  {% endfor %}
};

Instr Decoder::decode(std::uint32_t bytecode) {
  auto opType = getBits<0, 4>(bytecode);
  return map[opType](bytecode);
}

}
