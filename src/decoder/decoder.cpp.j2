// This file is autogenerated.
// Do not modify it manually!

#include <functional>
#include <stdexcept>
#include <type_traits>
#include <unordered_map>

#include "common/common.hpp"
#include "common/config.hpp"
#include "common/instruction.hpp"
#include "decoder/decoder.hpp"

namespace pvm {

struct DecodeError final : std::runtime_error {
  DecodeError(const std::string &msg) : std::runtime_error(msg) {}
};

{% for type in types +%}
{% set name = type.mnemonic %}
Instr decode_{{ name }}(Bytecode bytecode) {
  auto opID = static_cast<std::uint8_t>(getBitsReverse<5, 9>(bytecode));
  if (opID >= e{{ type.mnemonic | upper }}_OP_NUM) {
    throw DecodeError{"Unknown operation id for {{ type.mnemonic }} type"};
  }

  return Instr{
    .opType = e{{ name | upper }},
    .opID = opID,
    .instrVar = Instr{{ name | upper }} {
    {% for key, val in type.fields.items() %}
      .{{ key }} = getBitsReverse<{{ val.from }}, {{ val.to }}>(bytecode),
    {% endfor %}
    }
  };
}
{% endfor %}

std::array<std::function<Instr(Bytecode)>, eOPCODE_NUM> decodeDispatchTable{
  {% for type in types %}
  &decode_{{ type.mnemonic }},
  {% endfor %}
};

Instr Decoder::decode(Bytecode bytecode) {
  auto opType = getBitsReverse<0, 4>(bytecode);
  if (opType >= eOPCODE_NUM) {
    throw DecodeError{"Unknown operation type"};
  }

  auto instr = decodeDispatchTable[opType](bytecode);
  instr.opID = getBitsReverse<5, 9>(bytecode);
  return instr;
}

}
