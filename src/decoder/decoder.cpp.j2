// This file is autogenerated.
// Do not modify it manually!

#include <functional>
#include <stdexcept>
#include <type_traits>
#include <unordered_map>

#include "common/common.hpp"
#include "common/instruction.hpp"
#include "decoder/decoder.hpp"

namespace pvm {

{% for type in types +%}
{% set name = type.mnemonic %}
Instr decode{{ name | upper }}(std::uint32_t bytecode) {
  auto opID = getBits<5, 9>(bytecode);
  Instr{{ name | upper }} concreteInstr{
  {% for key, val in type.fields.items() %}
    .{{ key }} = getBits<{{ val.from }}, {{ val.to }}>(bytecode),
  {% endfor %}
  };

  return Instr{
    .opType = e{{ name | upper }},
    .opID = static_cast<std::uint8_t>(opID),
    .instrVar = concreteInstr,
  };
}
{% endfor %}

std::array<std::function<Instr(std::uint32_t)>, eOPCODE_NUM> decodeDispatchTable{
  {% for type in types %}
  &decode{{ type.mnemonic | upper }},
  {% endfor %}
};

Instr Decoder::decode(std::uint32_t bytecode) {
  auto opType = getBits<0, 4>(bytecode);
  if (opType >= eOPCODE_NUM) {
    throw std::runtime_error{"Unknown operation type"};
  }

  auto instr = decodeDispatchTable[opType](bytecode);
  instr.opID = getBits<5, 9>(bytecode);
  return instr;
}

}
