// This file is autogenerated.
// Do not modify it manually!

#include <array>
#include <functional>

#include "interpreter/interpreter.hpp"
#include "generated/handlers.hpp"

namespace pvm {

using State = Interpreter::State;

{% for type in types +%}
const std::array<std::function<void(State&, Instr)>, e{{ type.mnemonic | upper }}_OP_NUM> {{ type.mnemonic  }}DispatchTable{
  {% for instr in type.instrs %}
  &exec_{{ type.mnemonic }}_{{ instr }},
  {% endfor %}
};
{% endfor %}

{% for type in types +%}
void exec_{{ type.mnemonic | upper }}(State &state, Instr instr) {
  auto opID = instr.opID;
  {{ type.mnemonic }}DispatchTable[opID](state, instr);
}
{% endfor %}

std::array<std::function<void(State&, Instr)>, eOPCODE_NUM> opcodeDispatchTable{
  {% for type in types %}
  &exec_{{ type.mnemonic | upper }},
  {% endfor %}
};

void Interpreter::run() {
  auto instr = getInstr();
  opcodeDispatchTable[instr.opType](m_state, instr);
}

}
