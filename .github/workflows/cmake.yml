name: "[CMake]"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TEST_JOBS: 30

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.generator }} ${{ matrix.compiler }} ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    container: takosan/sim2022
    strategy:
      matrix:
        compiler: [g++-11]
        generator: [Unix Makefiles, Ninja]
        build_type: [Release]

    steps:
    - name: Checkout repo and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Jinja install
      run: pip3 install Jinja2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ./build \
          -G="${{matrix.generator}}" \
          -DCMAKE_CXX_COMPILER=${{matrix.compiler}} \
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
          -DSKIP_CLANG_FORMAT=ON \
          -DENABLE_LOG=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ./build --config ${{matrix.build_type}} -j

    - name: Unit tests
      working-directory: ./build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build_type}} -VV -j ${{env.TEST_JOBS}} -L unit

    # - name: E2E tests
    #   working-directory: ./build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{matrix.build_type}} -VV -j ${{env.TEST_JOBS}} -L e2e
