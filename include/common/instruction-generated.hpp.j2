// This file is autogenerated.
// Do not modify it manually!

#pragma once

#include <cstdint>
#include <variant>

namespace pvm {

enum OpType : std::uint8_t {
  {% for type in types %}
  e{{ type.mnemonic | upper }},
  {% endfor %}
  eOPCODENUM
};

{% for type in types +%}
struct Instr{{ type.mnemonic | upper }} {
  constexpr static OpType kType = e{{ type.mnemonic | upper }};
  {% for field in type.fields.keys() %}
  std::uint32_t {{ field }};
  {% endfor %}
};
{% endfor%}

struct Instr {
  using InstrVar = std::variant<
    {% for type in types[:-1] %}
    Instr{{ type.mnemonic | upper }},
    {% endfor %}
    Instr{{ types[-1].mnemonic | upper }}
  >;

  OpType opType;
  InstrVar instrVar;
};

}
