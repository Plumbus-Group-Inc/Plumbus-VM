# [from, to]
# opid from 5 to 9 is necessary!

types:
  - mnemonic: halt
    instrs: [halt]
    fields:
      zero: { type: std::uint8_t, from: 10, to: 31 }
  - mnemonic: unary
    instrs: [
        read,
        write,
        abs,
        # cast,
        # not,
        sqrt,
        # sin,
        # cos,
      ]
    fields:
      ttypeid: { type: std::size_t, from: 10, to: 19 }
      regid: { type: RegId, from: 20, to: 25 }
  - mnemonic: binary
    instrs: [
        add,
        sub,
        mul,
        div,
        # pow,
        less,
        # greater,
        # lequal,
        # gequal,
        equal,
        # or,
        # and,
        # xor,
        # min,
        # max,
      ]
    fields:
      ttypeid: { type: std::size_t, from: 10, to: 19 }
      regid1: { type: RegId, from: 20, to: 25 }
      regid2: { type: RegId, from: 26, to: 31 }
  - mnemonic: array
    instrs: [
      gep,
      size,
    ]
    fields:
      aregid: { type: RegId, from: 10, to: 15 }
      regid: { type: RegId, from: 16, to: 21 }
  - mnemonic: branch
    instrs: [
      branch,
      call,
      ret
    ]
    fields:
      regid: { type: RegId, from: 10, to: 15 }
      offset: { type: std::int16_t, from: 16, to: 31 }
  - mnemonic: obj_get
    instrs: [
      field
    ]
    fields:
      oregid: { type: RegId, from: 10, to: 15 }
      fregid: { type: RegId, from: 16, to: 21 }
  - mnemonic: obj_set
    instrs: [
      field
    ]
    fields:
      oregid: { type: RegId, from: 10, to: 15 }
      fregid: { type: RegId, from: 16, to: 21 }
      dregid: { type: RegId, from: 22, to: 27 }
  - mnemonic: new
    instrs: [
      array,
      object,
    ]
    fields:
      ttypeid: { type: std::uint8_t, from: 10, to: 19 }
      regid: {type: RegId, from: 20, to: 25}
  - mnemonic: imm
    instrs: [
        integer,
        floating,
      ]
    fields:
      data: { type: std::uint16_t, from: 10, to: 26 }
  - mnemonic: reg
    instrs: [mov]
    fields:
      regid: { type: RegId, from: 10, to: 15 }
