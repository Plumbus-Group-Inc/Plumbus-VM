# [from, to]
# opid from 5 to 9 is necessary!

types:
  - mnemonic: halt
    instrs: [halt]
    fields:
      zero: { type: std::uint8_t, from: 10, to: 31 }
  - mnemonic: unary
    instrs: [
        read,
        write,
        abs,
        # cast,
        # not,
        sqrt,
        # sin,
        # cos,
      ]
    fields:
      ttypeid: { type: std::size_t, from: 10, to: 14 }
      regid: { type: RegId, from: 15, to: 20 }
  - mnemonic: binary
    instrs: [
        add,
        sub,
        mul,
        div,
        # pow,
        less,
        # greater,
        # lequal,
        # gequal,
        equal,
        # or,
        # and,
        # xor,
        # min,
        # max,
      ]
    fields:
      ttypeid: { type: std::size_t, from: 10, to: 14 }
      regid1: { type: RegId, from: 15, to: 20 }
      regid2: { type: RegId, from: 21, to: 26 }
  - mnemonic: array
    instrs: [
    #   get,
    #   set,
    # # pop,
    # # insert,
    # # remove,
    # # resize,
    # # create,
    ]
    fields:
      aregid: { type: RegId, from: 10, to: 15 }
      regid: { type: RegId, from: 16, to: 21 }
  - mnemonic: branch
    instrs: [
      branch,
      call,
      ret
    ]
    fields:
      regid: { type: RegId, from: 10, to: 15 }
      offset: { type: std::int16_t, from: 16, to: 31 }
  - mnemonic: mem
    instrs: []
    # load,
    # store
    fields:
      regid: { type: RegId, from: 10, to: 15 }
  - mnemonic: imm
    instrs: [
        integer,
        # array,
        floating,
      ]
    fields:
      data: { type: std::uint16_t, from: 10, to: 26 }
  - mnemonic: reg
    instrs: [mov]
    fields:
      regid: { type: RegId, from: 10, to: 15 }
# - &frame
#   mnemonic: frame
#   fields:
#     opid: {from: 5, to: 9}
#     fregid: {from: 10, to: 14}
#     regid: {from: 15, to: 19}
#     unused: {from: 20, to: 23}
